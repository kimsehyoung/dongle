// Code generated by ent, DO NOT EDIT.

package subtitlegen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/kimsehyoung/dongle/app/subtitle/ent/subtitlegen/subtitle"
	"github.com/kimsehyoung/dongle/app/subtitle/ent/subtitlegen/video"
)

// Subtitle is the model entity for the Subtitle schema.
type Subtitle struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// VideoID holds the value of the "video_id" field.
	VideoID int `json:"video_id,omitempty"`
	// Language holds the value of the "language" field.
	Language string `json:"language,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SubtitleQuery when eager-loading is set.
	Edges        SubtitleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// SubtitleEdges holds the relations/edges for other nodes in the graph.
type SubtitleEdges struct {
	// Role holds the value of the role edge.
	Role *Video `json:"role,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RoleOrErr returns the Role value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SubtitleEdges) RoleOrErr() (*Video, error) {
	if e.loadedTypes[0] {
		if e.Role == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: video.Label}
		}
		return e.Role, nil
	}
	return nil, &NotLoadedError{edge: "role"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Subtitle) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subtitle.FieldID, subtitle.FieldVideoID:
			values[i] = new(sql.NullInt64)
		case subtitle.FieldLanguage, subtitle.FieldURL:
			values[i] = new(sql.NullString)
		case subtitle.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Subtitle fields.
func (s *Subtitle) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subtitle.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case subtitle.FieldVideoID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field video_id", values[i])
			} else if value.Valid {
				s.VideoID = int(value.Int64)
			}
		case subtitle.FieldLanguage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field language", values[i])
			} else if value.Valid {
				s.Language = value.String
			}
		case subtitle.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				s.URL = value.String
			}
		case subtitle.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				s.CreatedAt = value.Time
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Subtitle.
// This includes values selected through modifiers, order, etc.
func (s *Subtitle) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryRole queries the "role" edge of the Subtitle entity.
func (s *Subtitle) QueryRole() *VideoQuery {
	return NewSubtitleClient(s.config).QueryRole(s)
}

// Update returns a builder for updating this Subtitle.
// Note that you need to call Subtitle.Unwrap() before calling this method if this Subtitle
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Subtitle) Update() *SubtitleUpdateOne {
	return NewSubtitleClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Subtitle entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Subtitle) Unwrap() *Subtitle {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("subtitlegen: Subtitle is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Subtitle) String() string {
	var builder strings.Builder
	builder.WriteString("Subtitle(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("video_id=")
	builder.WriteString(fmt.Sprintf("%v", s.VideoID))
	builder.WriteString(", ")
	builder.WriteString("language=")
	builder.WriteString(s.Language)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(s.URL)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(s.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Subtitles is a parsable slice of Subtitle.
type Subtitles []*Subtitle
