// Code generated by ent, DO NOT EDIT.

package video

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the video type in the database.
	Label = "video"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAccountID holds the string denoting the account_id field in the database.
	FieldAccountID = "account_id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeSubtitles holds the string denoting the subtitles edge name in mutations.
	EdgeSubtitles = "subtitles"
	// Table holds the table name of the video in the database.
	Table = "video"
	// SubtitlesTable is the table that holds the subtitles relation/edge.
	SubtitlesTable = "subtitle"
	// SubtitlesInverseTable is the table name for the Subtitle entity.
	// It exists in this package in order to avoid circular dependency with the "subtitle" package.
	SubtitlesInverseTable = "subtitle"
	// SubtitlesColumn is the table column denoting the subtitles relation/edge.
	SubtitlesColumn = "video_id"
)

// Columns holds all SQL columns for video fields.
var Columns = []string{
	FieldID,
	FieldAccountID,
	FieldTitle,
	FieldURL,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt time.Time
)

// OrderOption defines the ordering options for the Video queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAccountID orders the results by the account_id field.
func ByAccountID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccountID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// BySubtitlesCount orders the results by subtitles count.
func BySubtitlesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubtitlesStep(), opts...)
	}
}

// BySubtitles orders the results by subtitles terms.
func BySubtitles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubtitlesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSubtitlesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubtitlesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SubtitlesTable, SubtitlesColumn),
	)
}
