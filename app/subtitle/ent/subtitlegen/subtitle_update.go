// Code generated by ent, DO NOT EDIT.

package subtitlegen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kimsehyoung/dongle/app/subtitle/ent/subtitlegen/predicate"
	"github.com/kimsehyoung/dongle/app/subtitle/ent/subtitlegen/subtitle"
	"github.com/kimsehyoung/dongle/app/subtitle/ent/subtitlegen/video"
)

// SubtitleUpdate is the builder for updating Subtitle entities.
type SubtitleUpdate struct {
	config
	hooks    []Hook
	mutation *SubtitleMutation
}

// Where appends a list predicates to the SubtitleUpdate builder.
func (su *SubtitleUpdate) Where(ps ...predicate.Subtitle) *SubtitleUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetVideoID sets the "video_id" field.
func (su *SubtitleUpdate) SetVideoID(i int) *SubtitleUpdate {
	su.mutation.SetVideoID(i)
	return su
}

// SetLanguage sets the "language" field.
func (su *SubtitleUpdate) SetLanguage(s string) *SubtitleUpdate {
	su.mutation.SetLanguage(s)
	return su
}

// SetURL sets the "url" field.
func (su *SubtitleUpdate) SetURL(s string) *SubtitleUpdate {
	su.mutation.SetURL(s)
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *SubtitleUpdate) SetCreatedAt(t time.Time) *SubtitleUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *SubtitleUpdate) SetNillableCreatedAt(t *time.Time) *SubtitleUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetRoleID sets the "role" edge to the Video entity by ID.
func (su *SubtitleUpdate) SetRoleID(id int) *SubtitleUpdate {
	su.mutation.SetRoleID(id)
	return su
}

// SetRole sets the "role" edge to the Video entity.
func (su *SubtitleUpdate) SetRole(v *Video) *SubtitleUpdate {
	return su.SetRoleID(v.ID)
}

// Mutation returns the SubtitleMutation object of the builder.
func (su *SubtitleUpdate) Mutation() *SubtitleMutation {
	return su.mutation
}

// ClearRole clears the "role" edge to the Video entity.
func (su *SubtitleUpdate) ClearRole() *SubtitleUpdate {
	su.mutation.ClearRole()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubtitleUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubtitleUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubtitleUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubtitleUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SubtitleUpdate) check() error {
	if _, ok := su.mutation.RoleID(); su.mutation.RoleCleared() && !ok {
		return errors.New(`subtitlegen: clearing a required unique edge "Subtitle.role"`)
	}
	return nil
}

func (su *SubtitleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subtitle.Table, subtitle.Columns, sqlgraph.NewFieldSpec(subtitle.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Language(); ok {
		_spec.SetField(subtitle.FieldLanguage, field.TypeString, value)
	}
	if value, ok := su.mutation.URL(); ok {
		_spec.SetField(subtitle.FieldURL, field.TypeString, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(subtitle.FieldCreatedAt, field.TypeTime, value)
	}
	if su.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subtitle.RoleTable,
			Columns: []string{subtitle.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subtitle.RoleTable,
			Columns: []string{subtitle.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subtitle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubtitleUpdateOne is the builder for updating a single Subtitle entity.
type SubtitleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubtitleMutation
}

// SetVideoID sets the "video_id" field.
func (suo *SubtitleUpdateOne) SetVideoID(i int) *SubtitleUpdateOne {
	suo.mutation.SetVideoID(i)
	return suo
}

// SetLanguage sets the "language" field.
func (suo *SubtitleUpdateOne) SetLanguage(s string) *SubtitleUpdateOne {
	suo.mutation.SetLanguage(s)
	return suo
}

// SetURL sets the "url" field.
func (suo *SubtitleUpdateOne) SetURL(s string) *SubtitleUpdateOne {
	suo.mutation.SetURL(s)
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *SubtitleUpdateOne) SetCreatedAt(t time.Time) *SubtitleUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *SubtitleUpdateOne) SetNillableCreatedAt(t *time.Time) *SubtitleUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetRoleID sets the "role" edge to the Video entity by ID.
func (suo *SubtitleUpdateOne) SetRoleID(id int) *SubtitleUpdateOne {
	suo.mutation.SetRoleID(id)
	return suo
}

// SetRole sets the "role" edge to the Video entity.
func (suo *SubtitleUpdateOne) SetRole(v *Video) *SubtitleUpdateOne {
	return suo.SetRoleID(v.ID)
}

// Mutation returns the SubtitleMutation object of the builder.
func (suo *SubtitleUpdateOne) Mutation() *SubtitleMutation {
	return suo.mutation
}

// ClearRole clears the "role" edge to the Video entity.
func (suo *SubtitleUpdateOne) ClearRole() *SubtitleUpdateOne {
	suo.mutation.ClearRole()
	return suo
}

// Where appends a list predicates to the SubtitleUpdate builder.
func (suo *SubtitleUpdateOne) Where(ps ...predicate.Subtitle) *SubtitleUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubtitleUpdateOne) Select(field string, fields ...string) *SubtitleUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subtitle entity.
func (suo *SubtitleUpdateOne) Save(ctx context.Context) (*Subtitle, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubtitleUpdateOne) SaveX(ctx context.Context) *Subtitle {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubtitleUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubtitleUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SubtitleUpdateOne) check() error {
	if _, ok := suo.mutation.RoleID(); suo.mutation.RoleCleared() && !ok {
		return errors.New(`subtitlegen: clearing a required unique edge "Subtitle.role"`)
	}
	return nil
}

func (suo *SubtitleUpdateOne) sqlSave(ctx context.Context) (_node *Subtitle, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subtitle.Table, subtitle.Columns, sqlgraph.NewFieldSpec(subtitle.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`subtitlegen: missing "Subtitle.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subtitle.FieldID)
		for _, f := range fields {
			if !subtitle.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("subtitlegen: invalid field %q for query", f)}
			}
			if f != subtitle.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Language(); ok {
		_spec.SetField(subtitle.FieldLanguage, field.TypeString, value)
	}
	if value, ok := suo.mutation.URL(); ok {
		_spec.SetField(subtitle.FieldURL, field.TypeString, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(subtitle.FieldCreatedAt, field.TypeTime, value)
	}
	if suo.mutation.RoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subtitle.RoleTable,
			Columns: []string{subtitle.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subtitle.RoleTable,
			Columns: []string{subtitle.RoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(video.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Subtitle{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subtitle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
