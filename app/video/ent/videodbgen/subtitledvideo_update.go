// Code generated by ent, DO NOT EDIT.

package videodbgen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kimsehyoung/dongle/app/video/ent/videodbgen/originalvideo"
	"github.com/kimsehyoung/dongle/app/video/ent/videodbgen/predicate"
	"github.com/kimsehyoung/dongle/app/video/ent/videodbgen/subtitledvideo"
)

// SubtitledVideoUpdate is the builder for updating SubtitledVideo entities.
type SubtitledVideoUpdate struct {
	config
	hooks    []Hook
	mutation *SubtitledVideoMutation
}

// Where appends a list predicates to the SubtitledVideoUpdate builder.
func (svu *SubtitledVideoUpdate) Where(ps ...predicate.SubtitledVideo) *SubtitledVideoUpdate {
	svu.mutation.Where(ps...)
	return svu
}

// SetOriginalVideoID sets the "original_video_id" field.
func (svu *SubtitledVideoUpdate) SetOriginalVideoID(i int) *SubtitledVideoUpdate {
	svu.mutation.SetOriginalVideoID(i)
	return svu
}

// SetURL sets the "url" field.
func (svu *SubtitledVideoUpdate) SetURL(s string) *SubtitledVideoUpdate {
	svu.mutation.SetURL(s)
	return svu
}

// SetCreatedAt sets the "created_at" field.
func (svu *SubtitledVideoUpdate) SetCreatedAt(t time.Time) *SubtitledVideoUpdate {
	svu.mutation.SetCreatedAt(t)
	return svu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (svu *SubtitledVideoUpdate) SetNillableCreatedAt(t *time.Time) *SubtitledVideoUpdate {
	if t != nil {
		svu.SetCreatedAt(*t)
	}
	return svu
}

// SetOriginalVideo sets the "original_video" edge to the OriginalVideo entity.
func (svu *SubtitledVideoUpdate) SetOriginalVideo(o *OriginalVideo) *SubtitledVideoUpdate {
	return svu.SetOriginalVideoID(o.ID)
}

// Mutation returns the SubtitledVideoMutation object of the builder.
func (svu *SubtitledVideoUpdate) Mutation() *SubtitledVideoMutation {
	return svu.mutation
}

// ClearOriginalVideo clears the "original_video" edge to the OriginalVideo entity.
func (svu *SubtitledVideoUpdate) ClearOriginalVideo() *SubtitledVideoUpdate {
	svu.mutation.ClearOriginalVideo()
	return svu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (svu *SubtitledVideoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, svu.sqlSave, svu.mutation, svu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (svu *SubtitledVideoUpdate) SaveX(ctx context.Context) int {
	affected, err := svu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (svu *SubtitledVideoUpdate) Exec(ctx context.Context) error {
	_, err := svu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svu *SubtitledVideoUpdate) ExecX(ctx context.Context) {
	if err := svu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svu *SubtitledVideoUpdate) check() error {
	if _, ok := svu.mutation.OriginalVideoID(); svu.mutation.OriginalVideoCleared() && !ok {
		return errors.New(`videodbgen: clearing a required unique edge "SubtitledVideo.original_video"`)
	}
	return nil
}

func (svu *SubtitledVideoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := svu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subtitledvideo.Table, subtitledvideo.Columns, sqlgraph.NewFieldSpec(subtitledvideo.FieldID, field.TypeInt))
	if ps := svu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svu.mutation.URL(); ok {
		_spec.SetField(subtitledvideo.FieldURL, field.TypeString, value)
	}
	if value, ok := svu.mutation.CreatedAt(); ok {
		_spec.SetField(subtitledvideo.FieldCreatedAt, field.TypeTime, value)
	}
	if svu.mutation.OriginalVideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subtitledvideo.OriginalVideoTable,
			Columns: []string{subtitledvideo.OriginalVideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(originalvideo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svu.mutation.OriginalVideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subtitledvideo.OriginalVideoTable,
			Columns: []string{subtitledvideo.OriginalVideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(originalvideo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, svu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subtitledvideo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	svu.mutation.done = true
	return n, nil
}

// SubtitledVideoUpdateOne is the builder for updating a single SubtitledVideo entity.
type SubtitledVideoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubtitledVideoMutation
}

// SetOriginalVideoID sets the "original_video_id" field.
func (svuo *SubtitledVideoUpdateOne) SetOriginalVideoID(i int) *SubtitledVideoUpdateOne {
	svuo.mutation.SetOriginalVideoID(i)
	return svuo
}

// SetURL sets the "url" field.
func (svuo *SubtitledVideoUpdateOne) SetURL(s string) *SubtitledVideoUpdateOne {
	svuo.mutation.SetURL(s)
	return svuo
}

// SetCreatedAt sets the "created_at" field.
func (svuo *SubtitledVideoUpdateOne) SetCreatedAt(t time.Time) *SubtitledVideoUpdateOne {
	svuo.mutation.SetCreatedAt(t)
	return svuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (svuo *SubtitledVideoUpdateOne) SetNillableCreatedAt(t *time.Time) *SubtitledVideoUpdateOne {
	if t != nil {
		svuo.SetCreatedAt(*t)
	}
	return svuo
}

// SetOriginalVideo sets the "original_video" edge to the OriginalVideo entity.
func (svuo *SubtitledVideoUpdateOne) SetOriginalVideo(o *OriginalVideo) *SubtitledVideoUpdateOne {
	return svuo.SetOriginalVideoID(o.ID)
}

// Mutation returns the SubtitledVideoMutation object of the builder.
func (svuo *SubtitledVideoUpdateOne) Mutation() *SubtitledVideoMutation {
	return svuo.mutation
}

// ClearOriginalVideo clears the "original_video" edge to the OriginalVideo entity.
func (svuo *SubtitledVideoUpdateOne) ClearOriginalVideo() *SubtitledVideoUpdateOne {
	svuo.mutation.ClearOriginalVideo()
	return svuo
}

// Where appends a list predicates to the SubtitledVideoUpdate builder.
func (svuo *SubtitledVideoUpdateOne) Where(ps ...predicate.SubtitledVideo) *SubtitledVideoUpdateOne {
	svuo.mutation.Where(ps...)
	return svuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (svuo *SubtitledVideoUpdateOne) Select(field string, fields ...string) *SubtitledVideoUpdateOne {
	svuo.fields = append([]string{field}, fields...)
	return svuo
}

// Save executes the query and returns the updated SubtitledVideo entity.
func (svuo *SubtitledVideoUpdateOne) Save(ctx context.Context) (*SubtitledVideo, error) {
	return withHooks(ctx, svuo.sqlSave, svuo.mutation, svuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (svuo *SubtitledVideoUpdateOne) SaveX(ctx context.Context) *SubtitledVideo {
	node, err := svuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (svuo *SubtitledVideoUpdateOne) Exec(ctx context.Context) error {
	_, err := svuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svuo *SubtitledVideoUpdateOne) ExecX(ctx context.Context) {
	if err := svuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svuo *SubtitledVideoUpdateOne) check() error {
	if _, ok := svuo.mutation.OriginalVideoID(); svuo.mutation.OriginalVideoCleared() && !ok {
		return errors.New(`videodbgen: clearing a required unique edge "SubtitledVideo.original_video"`)
	}
	return nil
}

func (svuo *SubtitledVideoUpdateOne) sqlSave(ctx context.Context) (_node *SubtitledVideo, err error) {
	if err := svuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subtitledvideo.Table, subtitledvideo.Columns, sqlgraph.NewFieldSpec(subtitledvideo.FieldID, field.TypeInt))
	id, ok := svuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`videodbgen: missing "SubtitledVideo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := svuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subtitledvideo.FieldID)
		for _, f := range fields {
			if !subtitledvideo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("videodbgen: invalid field %q for query", f)}
			}
			if f != subtitledvideo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := svuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := svuo.mutation.URL(); ok {
		_spec.SetField(subtitledvideo.FieldURL, field.TypeString, value)
	}
	if value, ok := svuo.mutation.CreatedAt(); ok {
		_spec.SetField(subtitledvideo.FieldCreatedAt, field.TypeTime, value)
	}
	if svuo.mutation.OriginalVideoCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subtitledvideo.OriginalVideoTable,
			Columns: []string{subtitledvideo.OriginalVideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(originalvideo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := svuo.mutation.OriginalVideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subtitledvideo.OriginalVideoTable,
			Columns: []string{subtitledvideo.OriginalVideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(originalvideo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SubtitledVideo{config: svuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, svuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subtitledvideo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	svuo.mutation.done = true
	return _node, nil
}
