// Code generated by ent, DO NOT EDIT.

package videodbgen

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kimsehyoung/dongle/app/video/ent/videodbgen/originalvideo"
	"github.com/kimsehyoung/dongle/app/video/ent/videodbgen/predicate"
	"github.com/kimsehyoung/dongle/app/video/ent/videodbgen/subtitledvideo"
)

// OriginalVideoQuery is the builder for querying OriginalVideo entities.
type OriginalVideoQuery struct {
	config
	ctx                 *QueryContext
	order               []originalvideo.OrderOption
	inters              []Interceptor
	predicates          []predicate.OriginalVideo
	withSubtitledVideos *SubtitledVideoQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OriginalVideoQuery builder.
func (ovq *OriginalVideoQuery) Where(ps ...predicate.OriginalVideo) *OriginalVideoQuery {
	ovq.predicates = append(ovq.predicates, ps...)
	return ovq
}

// Limit the number of records to be returned by this query.
func (ovq *OriginalVideoQuery) Limit(limit int) *OriginalVideoQuery {
	ovq.ctx.Limit = &limit
	return ovq
}

// Offset to start from.
func (ovq *OriginalVideoQuery) Offset(offset int) *OriginalVideoQuery {
	ovq.ctx.Offset = &offset
	return ovq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ovq *OriginalVideoQuery) Unique(unique bool) *OriginalVideoQuery {
	ovq.ctx.Unique = &unique
	return ovq
}

// Order specifies how the records should be ordered.
func (ovq *OriginalVideoQuery) Order(o ...originalvideo.OrderOption) *OriginalVideoQuery {
	ovq.order = append(ovq.order, o...)
	return ovq
}

// QuerySubtitledVideos chains the current query on the "subtitled_videos" edge.
func (ovq *OriginalVideoQuery) QuerySubtitledVideos() *SubtitledVideoQuery {
	query := (&SubtitledVideoClient{config: ovq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ovq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ovq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(originalvideo.Table, originalvideo.FieldID, selector),
			sqlgraph.To(subtitledvideo.Table, subtitledvideo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, originalvideo.SubtitledVideosTable, originalvideo.SubtitledVideosColumn),
		)
		fromU = sqlgraph.SetNeighbors(ovq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first OriginalVideo entity from the query.
// Returns a *NotFoundError when no OriginalVideo was found.
func (ovq *OriginalVideoQuery) First(ctx context.Context) (*OriginalVideo, error) {
	nodes, err := ovq.Limit(1).All(setContextOp(ctx, ovq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{originalvideo.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ovq *OriginalVideoQuery) FirstX(ctx context.Context) *OriginalVideo {
	node, err := ovq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OriginalVideo ID from the query.
// Returns a *NotFoundError when no OriginalVideo ID was found.
func (ovq *OriginalVideoQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ovq.Limit(1).IDs(setContextOp(ctx, ovq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{originalvideo.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ovq *OriginalVideoQuery) FirstIDX(ctx context.Context) int {
	id, err := ovq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OriginalVideo entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OriginalVideo entity is found.
// Returns a *NotFoundError when no OriginalVideo entities are found.
func (ovq *OriginalVideoQuery) Only(ctx context.Context) (*OriginalVideo, error) {
	nodes, err := ovq.Limit(2).All(setContextOp(ctx, ovq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{originalvideo.Label}
	default:
		return nil, &NotSingularError{originalvideo.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ovq *OriginalVideoQuery) OnlyX(ctx context.Context) *OriginalVideo {
	node, err := ovq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OriginalVideo ID in the query.
// Returns a *NotSingularError when more than one OriginalVideo ID is found.
// Returns a *NotFoundError when no entities are found.
func (ovq *OriginalVideoQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = ovq.Limit(2).IDs(setContextOp(ctx, ovq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{originalvideo.Label}
	default:
		err = &NotSingularError{originalvideo.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ovq *OriginalVideoQuery) OnlyIDX(ctx context.Context) int {
	id, err := ovq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OriginalVideos.
func (ovq *OriginalVideoQuery) All(ctx context.Context) ([]*OriginalVideo, error) {
	ctx = setContextOp(ctx, ovq.ctx, "All")
	if err := ovq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OriginalVideo, *OriginalVideoQuery]()
	return withInterceptors[[]*OriginalVideo](ctx, ovq, qr, ovq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ovq *OriginalVideoQuery) AllX(ctx context.Context) []*OriginalVideo {
	nodes, err := ovq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OriginalVideo IDs.
func (ovq *OriginalVideoQuery) IDs(ctx context.Context) (ids []int, err error) {
	if ovq.ctx.Unique == nil && ovq.path != nil {
		ovq.Unique(true)
	}
	ctx = setContextOp(ctx, ovq.ctx, "IDs")
	if err = ovq.Select(originalvideo.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ovq *OriginalVideoQuery) IDsX(ctx context.Context) []int {
	ids, err := ovq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ovq *OriginalVideoQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ovq.ctx, "Count")
	if err := ovq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ovq, querierCount[*OriginalVideoQuery](), ovq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ovq *OriginalVideoQuery) CountX(ctx context.Context) int {
	count, err := ovq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ovq *OriginalVideoQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ovq.ctx, "Exist")
	switch _, err := ovq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("videodbgen: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ovq *OriginalVideoQuery) ExistX(ctx context.Context) bool {
	exist, err := ovq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OriginalVideoQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ovq *OriginalVideoQuery) Clone() *OriginalVideoQuery {
	if ovq == nil {
		return nil
	}
	return &OriginalVideoQuery{
		config:              ovq.config,
		ctx:                 ovq.ctx.Clone(),
		order:               append([]originalvideo.OrderOption{}, ovq.order...),
		inters:              append([]Interceptor{}, ovq.inters...),
		predicates:          append([]predicate.OriginalVideo{}, ovq.predicates...),
		withSubtitledVideos: ovq.withSubtitledVideos.Clone(),
		// clone intermediate query.
		sql:  ovq.sql.Clone(),
		path: ovq.path,
	}
}

// WithSubtitledVideos tells the query-builder to eager-load the nodes that are connected to
// the "subtitled_videos" edge. The optional arguments are used to configure the query builder of the edge.
func (ovq *OriginalVideoQuery) WithSubtitledVideos(opts ...func(*SubtitledVideoQuery)) *OriginalVideoQuery {
	query := (&SubtitledVideoClient{config: ovq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ovq.withSubtitledVideos = query
	return ovq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AccountID int `json:"account_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OriginalVideo.Query().
//		GroupBy(originalvideo.FieldAccountID).
//		Aggregate(videodbgen.Count()).
//		Scan(ctx, &v)
func (ovq *OriginalVideoQuery) GroupBy(field string, fields ...string) *OriginalVideoGroupBy {
	ovq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OriginalVideoGroupBy{build: ovq}
	grbuild.flds = &ovq.ctx.Fields
	grbuild.label = originalvideo.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AccountID int `json:"account_id,omitempty"`
//	}
//
//	client.OriginalVideo.Query().
//		Select(originalvideo.FieldAccountID).
//		Scan(ctx, &v)
func (ovq *OriginalVideoQuery) Select(fields ...string) *OriginalVideoSelect {
	ovq.ctx.Fields = append(ovq.ctx.Fields, fields...)
	sbuild := &OriginalVideoSelect{OriginalVideoQuery: ovq}
	sbuild.label = originalvideo.Label
	sbuild.flds, sbuild.scan = &ovq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OriginalVideoSelect configured with the given aggregations.
func (ovq *OriginalVideoQuery) Aggregate(fns ...AggregateFunc) *OriginalVideoSelect {
	return ovq.Select().Aggregate(fns...)
}

func (ovq *OriginalVideoQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ovq.inters {
		if inter == nil {
			return fmt.Errorf("videodbgen: uninitialized interceptor (forgotten import videodbgen/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ovq); err != nil {
				return err
			}
		}
	}
	for _, f := range ovq.ctx.Fields {
		if !originalvideo.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("videodbgen: invalid field %q for query", f)}
		}
	}
	if ovq.path != nil {
		prev, err := ovq.path(ctx)
		if err != nil {
			return err
		}
		ovq.sql = prev
	}
	return nil
}

func (ovq *OriginalVideoQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OriginalVideo, error) {
	var (
		nodes       = []*OriginalVideo{}
		_spec       = ovq.querySpec()
		loadedTypes = [1]bool{
			ovq.withSubtitledVideos != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OriginalVideo).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OriginalVideo{config: ovq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ovq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ovq.withSubtitledVideos; query != nil {
		if err := ovq.loadSubtitledVideos(ctx, query, nodes,
			func(n *OriginalVideo) { n.Edges.SubtitledVideos = []*SubtitledVideo{} },
			func(n *OriginalVideo, e *SubtitledVideo) {
				n.Edges.SubtitledVideos = append(n.Edges.SubtitledVideos, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ovq *OriginalVideoQuery) loadSubtitledVideos(ctx context.Context, query *SubtitledVideoQuery, nodes []*OriginalVideo, init func(*OriginalVideo), assign func(*OriginalVideo, *SubtitledVideo)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*OriginalVideo)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(subtitledvideo.FieldOriginalVideoID)
	}
	query.Where(predicate.SubtitledVideo(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(originalvideo.SubtitledVideosColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OriginalVideoID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "original_video_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (ovq *OriginalVideoQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ovq.querySpec()
	_spec.Node.Columns = ovq.ctx.Fields
	if len(ovq.ctx.Fields) > 0 {
		_spec.Unique = ovq.ctx.Unique != nil && *ovq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ovq.driver, _spec)
}

func (ovq *OriginalVideoQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(originalvideo.Table, originalvideo.Columns, sqlgraph.NewFieldSpec(originalvideo.FieldID, field.TypeInt))
	_spec.From = ovq.sql
	if unique := ovq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ovq.path != nil {
		_spec.Unique = true
	}
	if fields := ovq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, originalvideo.FieldID)
		for i := range fields {
			if fields[i] != originalvideo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ovq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ovq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ovq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ovq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ovq *OriginalVideoQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ovq.driver.Dialect())
	t1 := builder.Table(originalvideo.Table)
	columns := ovq.ctx.Fields
	if len(columns) == 0 {
		columns = originalvideo.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ovq.sql != nil {
		selector = ovq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ovq.ctx.Unique != nil && *ovq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ovq.predicates {
		p(selector)
	}
	for _, p := range ovq.order {
		p(selector)
	}
	if offset := ovq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ovq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// OriginalVideoGroupBy is the group-by builder for OriginalVideo entities.
type OriginalVideoGroupBy struct {
	selector
	build *OriginalVideoQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ovgb *OriginalVideoGroupBy) Aggregate(fns ...AggregateFunc) *OriginalVideoGroupBy {
	ovgb.fns = append(ovgb.fns, fns...)
	return ovgb
}

// Scan applies the selector query and scans the result into the given value.
func (ovgb *OriginalVideoGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ovgb.build.ctx, "GroupBy")
	if err := ovgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OriginalVideoQuery, *OriginalVideoGroupBy](ctx, ovgb.build, ovgb, ovgb.build.inters, v)
}

func (ovgb *OriginalVideoGroupBy) sqlScan(ctx context.Context, root *OriginalVideoQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ovgb.fns))
	for _, fn := range ovgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ovgb.flds)+len(ovgb.fns))
		for _, f := range *ovgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ovgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ovgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OriginalVideoSelect is the builder for selecting fields of OriginalVideo entities.
type OriginalVideoSelect struct {
	*OriginalVideoQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ovs *OriginalVideoSelect) Aggregate(fns ...AggregateFunc) *OriginalVideoSelect {
	ovs.fns = append(ovs.fns, fns...)
	return ovs
}

// Scan applies the selector query and scans the result into the given value.
func (ovs *OriginalVideoSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ovs.ctx, "Select")
	if err := ovs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OriginalVideoQuery, *OriginalVideoSelect](ctx, ovs.OriginalVideoQuery, ovs, ovs.inters, v)
}

func (ovs *OriginalVideoSelect) sqlScan(ctx context.Context, root *OriginalVideoQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ovs.fns))
	for _, fn := range ovs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ovs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ovs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
