// Code generated by ent, DO NOT EDIT.

package videodbgen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kimsehyoung/dongle/app/video/ent/videodbgen/originalvideo"
	"github.com/kimsehyoung/dongle/app/video/ent/videodbgen/predicate"
	"github.com/kimsehyoung/dongle/app/video/ent/videodbgen/subtitledvideo"
)

// OriginalVideoUpdate is the builder for updating OriginalVideo entities.
type OriginalVideoUpdate struct {
	config
	hooks    []Hook
	mutation *OriginalVideoMutation
}

// Where appends a list predicates to the OriginalVideoUpdate builder.
func (ovu *OriginalVideoUpdate) Where(ps ...predicate.OriginalVideo) *OriginalVideoUpdate {
	ovu.mutation.Where(ps...)
	return ovu
}

// SetAccountID sets the "account_id" field.
func (ovu *OriginalVideoUpdate) SetAccountID(i int) *OriginalVideoUpdate {
	ovu.mutation.ResetAccountID()
	ovu.mutation.SetAccountID(i)
	return ovu
}

// AddAccountID adds i to the "account_id" field.
func (ovu *OriginalVideoUpdate) AddAccountID(i int) *OriginalVideoUpdate {
	ovu.mutation.AddAccountID(i)
	return ovu
}

// SetTitle sets the "title" field.
func (ovu *OriginalVideoUpdate) SetTitle(s string) *OriginalVideoUpdate {
	ovu.mutation.SetTitle(s)
	return ovu
}

// SetURL sets the "url" field.
func (ovu *OriginalVideoUpdate) SetURL(s string) *OriginalVideoUpdate {
	ovu.mutation.SetURL(s)
	return ovu
}

// SetCreatedAt sets the "created_at" field.
func (ovu *OriginalVideoUpdate) SetCreatedAt(t time.Time) *OriginalVideoUpdate {
	ovu.mutation.SetCreatedAt(t)
	return ovu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ovu *OriginalVideoUpdate) SetNillableCreatedAt(t *time.Time) *OriginalVideoUpdate {
	if t != nil {
		ovu.SetCreatedAt(*t)
	}
	return ovu
}

// AddSubtitledVideoIDs adds the "subtitled_videos" edge to the SubtitledVideo entity by IDs.
func (ovu *OriginalVideoUpdate) AddSubtitledVideoIDs(ids ...int) *OriginalVideoUpdate {
	ovu.mutation.AddSubtitledVideoIDs(ids...)
	return ovu
}

// AddSubtitledVideos adds the "subtitled_videos" edges to the SubtitledVideo entity.
func (ovu *OriginalVideoUpdate) AddSubtitledVideos(s ...*SubtitledVideo) *OriginalVideoUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ovu.AddSubtitledVideoIDs(ids...)
}

// Mutation returns the OriginalVideoMutation object of the builder.
func (ovu *OriginalVideoUpdate) Mutation() *OriginalVideoMutation {
	return ovu.mutation
}

// ClearSubtitledVideos clears all "subtitled_videos" edges to the SubtitledVideo entity.
func (ovu *OriginalVideoUpdate) ClearSubtitledVideos() *OriginalVideoUpdate {
	ovu.mutation.ClearSubtitledVideos()
	return ovu
}

// RemoveSubtitledVideoIDs removes the "subtitled_videos" edge to SubtitledVideo entities by IDs.
func (ovu *OriginalVideoUpdate) RemoveSubtitledVideoIDs(ids ...int) *OriginalVideoUpdate {
	ovu.mutation.RemoveSubtitledVideoIDs(ids...)
	return ovu
}

// RemoveSubtitledVideos removes "subtitled_videos" edges to SubtitledVideo entities.
func (ovu *OriginalVideoUpdate) RemoveSubtitledVideos(s ...*SubtitledVideo) *OriginalVideoUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ovu.RemoveSubtitledVideoIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ovu *OriginalVideoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ovu.sqlSave, ovu.mutation, ovu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ovu *OriginalVideoUpdate) SaveX(ctx context.Context) int {
	affected, err := ovu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ovu *OriginalVideoUpdate) Exec(ctx context.Context) error {
	_, err := ovu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ovu *OriginalVideoUpdate) ExecX(ctx context.Context) {
	if err := ovu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ovu *OriginalVideoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(originalvideo.Table, originalvideo.Columns, sqlgraph.NewFieldSpec(originalvideo.FieldID, field.TypeInt))
	if ps := ovu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ovu.mutation.AccountID(); ok {
		_spec.SetField(originalvideo.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := ovu.mutation.AddedAccountID(); ok {
		_spec.AddField(originalvideo.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := ovu.mutation.Title(); ok {
		_spec.SetField(originalvideo.FieldTitle, field.TypeString, value)
	}
	if value, ok := ovu.mutation.URL(); ok {
		_spec.SetField(originalvideo.FieldURL, field.TypeString, value)
	}
	if value, ok := ovu.mutation.CreatedAt(); ok {
		_spec.SetField(originalvideo.FieldCreatedAt, field.TypeTime, value)
	}
	if ovu.mutation.SubtitledVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   originalvideo.SubtitledVideosTable,
			Columns: []string{originalvideo.SubtitledVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtitledvideo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ovu.mutation.RemovedSubtitledVideosIDs(); len(nodes) > 0 && !ovu.mutation.SubtitledVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   originalvideo.SubtitledVideosTable,
			Columns: []string{originalvideo.SubtitledVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtitledvideo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ovu.mutation.SubtitledVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   originalvideo.SubtitledVideosTable,
			Columns: []string{originalvideo.SubtitledVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtitledvideo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ovu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{originalvideo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ovu.mutation.done = true
	return n, nil
}

// OriginalVideoUpdateOne is the builder for updating a single OriginalVideo entity.
type OriginalVideoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OriginalVideoMutation
}

// SetAccountID sets the "account_id" field.
func (ovuo *OriginalVideoUpdateOne) SetAccountID(i int) *OriginalVideoUpdateOne {
	ovuo.mutation.ResetAccountID()
	ovuo.mutation.SetAccountID(i)
	return ovuo
}

// AddAccountID adds i to the "account_id" field.
func (ovuo *OriginalVideoUpdateOne) AddAccountID(i int) *OriginalVideoUpdateOne {
	ovuo.mutation.AddAccountID(i)
	return ovuo
}

// SetTitle sets the "title" field.
func (ovuo *OriginalVideoUpdateOne) SetTitle(s string) *OriginalVideoUpdateOne {
	ovuo.mutation.SetTitle(s)
	return ovuo
}

// SetURL sets the "url" field.
func (ovuo *OriginalVideoUpdateOne) SetURL(s string) *OriginalVideoUpdateOne {
	ovuo.mutation.SetURL(s)
	return ovuo
}

// SetCreatedAt sets the "created_at" field.
func (ovuo *OriginalVideoUpdateOne) SetCreatedAt(t time.Time) *OriginalVideoUpdateOne {
	ovuo.mutation.SetCreatedAt(t)
	return ovuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ovuo *OriginalVideoUpdateOne) SetNillableCreatedAt(t *time.Time) *OriginalVideoUpdateOne {
	if t != nil {
		ovuo.SetCreatedAt(*t)
	}
	return ovuo
}

// AddSubtitledVideoIDs adds the "subtitled_videos" edge to the SubtitledVideo entity by IDs.
func (ovuo *OriginalVideoUpdateOne) AddSubtitledVideoIDs(ids ...int) *OriginalVideoUpdateOne {
	ovuo.mutation.AddSubtitledVideoIDs(ids...)
	return ovuo
}

// AddSubtitledVideos adds the "subtitled_videos" edges to the SubtitledVideo entity.
func (ovuo *OriginalVideoUpdateOne) AddSubtitledVideos(s ...*SubtitledVideo) *OriginalVideoUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ovuo.AddSubtitledVideoIDs(ids...)
}

// Mutation returns the OriginalVideoMutation object of the builder.
func (ovuo *OriginalVideoUpdateOne) Mutation() *OriginalVideoMutation {
	return ovuo.mutation
}

// ClearSubtitledVideos clears all "subtitled_videos" edges to the SubtitledVideo entity.
func (ovuo *OriginalVideoUpdateOne) ClearSubtitledVideos() *OriginalVideoUpdateOne {
	ovuo.mutation.ClearSubtitledVideos()
	return ovuo
}

// RemoveSubtitledVideoIDs removes the "subtitled_videos" edge to SubtitledVideo entities by IDs.
func (ovuo *OriginalVideoUpdateOne) RemoveSubtitledVideoIDs(ids ...int) *OriginalVideoUpdateOne {
	ovuo.mutation.RemoveSubtitledVideoIDs(ids...)
	return ovuo
}

// RemoveSubtitledVideos removes "subtitled_videos" edges to SubtitledVideo entities.
func (ovuo *OriginalVideoUpdateOne) RemoveSubtitledVideos(s ...*SubtitledVideo) *OriginalVideoUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ovuo.RemoveSubtitledVideoIDs(ids...)
}

// Where appends a list predicates to the OriginalVideoUpdate builder.
func (ovuo *OriginalVideoUpdateOne) Where(ps ...predicate.OriginalVideo) *OriginalVideoUpdateOne {
	ovuo.mutation.Where(ps...)
	return ovuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ovuo *OriginalVideoUpdateOne) Select(field string, fields ...string) *OriginalVideoUpdateOne {
	ovuo.fields = append([]string{field}, fields...)
	return ovuo
}

// Save executes the query and returns the updated OriginalVideo entity.
func (ovuo *OriginalVideoUpdateOne) Save(ctx context.Context) (*OriginalVideo, error) {
	return withHooks(ctx, ovuo.sqlSave, ovuo.mutation, ovuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ovuo *OriginalVideoUpdateOne) SaveX(ctx context.Context) *OriginalVideo {
	node, err := ovuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ovuo *OriginalVideoUpdateOne) Exec(ctx context.Context) error {
	_, err := ovuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ovuo *OriginalVideoUpdateOne) ExecX(ctx context.Context) {
	if err := ovuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ovuo *OriginalVideoUpdateOne) sqlSave(ctx context.Context) (_node *OriginalVideo, err error) {
	_spec := sqlgraph.NewUpdateSpec(originalvideo.Table, originalvideo.Columns, sqlgraph.NewFieldSpec(originalvideo.FieldID, field.TypeInt))
	id, ok := ovuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`videodbgen: missing "OriginalVideo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ovuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, originalvideo.FieldID)
		for _, f := range fields {
			if !originalvideo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("videodbgen: invalid field %q for query", f)}
			}
			if f != originalvideo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ovuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ovuo.mutation.AccountID(); ok {
		_spec.SetField(originalvideo.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := ovuo.mutation.AddedAccountID(); ok {
		_spec.AddField(originalvideo.FieldAccountID, field.TypeInt, value)
	}
	if value, ok := ovuo.mutation.Title(); ok {
		_spec.SetField(originalvideo.FieldTitle, field.TypeString, value)
	}
	if value, ok := ovuo.mutation.URL(); ok {
		_spec.SetField(originalvideo.FieldURL, field.TypeString, value)
	}
	if value, ok := ovuo.mutation.CreatedAt(); ok {
		_spec.SetField(originalvideo.FieldCreatedAt, field.TypeTime, value)
	}
	if ovuo.mutation.SubtitledVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   originalvideo.SubtitledVideosTable,
			Columns: []string{originalvideo.SubtitledVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtitledvideo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ovuo.mutation.RemovedSubtitledVideosIDs(); len(nodes) > 0 && !ovuo.mutation.SubtitledVideosCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   originalvideo.SubtitledVideosTable,
			Columns: []string{originalvideo.SubtitledVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtitledvideo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ovuo.mutation.SubtitledVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   originalvideo.SubtitledVideosTable,
			Columns: []string{originalvideo.SubtitledVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtitledvideo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &OriginalVideo{config: ovuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ovuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{originalvideo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ovuo.mutation.done = true
	return _node, nil
}
