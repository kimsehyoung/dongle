// Code generated by ent, DO NOT EDIT.

package videodbgen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kimsehyoung/dongle/app/video/ent/videodbgen/originalvideo"
	"github.com/kimsehyoung/dongle/app/video/ent/videodbgen/subtitledvideo"
)

// SubtitledVideoCreate is the builder for creating a SubtitledVideo entity.
type SubtitledVideoCreate struct {
	config
	mutation *SubtitledVideoMutation
	hooks    []Hook
}

// SetOriginalVideoID sets the "original_video_id" field.
func (svc *SubtitledVideoCreate) SetOriginalVideoID(i int) *SubtitledVideoCreate {
	svc.mutation.SetOriginalVideoID(i)
	return svc
}

// SetURL sets the "url" field.
func (svc *SubtitledVideoCreate) SetURL(s string) *SubtitledVideoCreate {
	svc.mutation.SetURL(s)
	return svc
}

// SetCreatedAt sets the "created_at" field.
func (svc *SubtitledVideoCreate) SetCreatedAt(t time.Time) *SubtitledVideoCreate {
	svc.mutation.SetCreatedAt(t)
	return svc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (svc *SubtitledVideoCreate) SetNillableCreatedAt(t *time.Time) *SubtitledVideoCreate {
	if t != nil {
		svc.SetCreatedAt(*t)
	}
	return svc
}

// SetOriginalVideo sets the "original_video" edge to the OriginalVideo entity.
func (svc *SubtitledVideoCreate) SetOriginalVideo(o *OriginalVideo) *SubtitledVideoCreate {
	return svc.SetOriginalVideoID(o.ID)
}

// Mutation returns the SubtitledVideoMutation object of the builder.
func (svc *SubtitledVideoCreate) Mutation() *SubtitledVideoMutation {
	return svc.mutation
}

// Save creates the SubtitledVideo in the database.
func (svc *SubtitledVideoCreate) Save(ctx context.Context) (*SubtitledVideo, error) {
	svc.defaults()
	return withHooks(ctx, svc.sqlSave, svc.mutation, svc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (svc *SubtitledVideoCreate) SaveX(ctx context.Context) *SubtitledVideo {
	v, err := svc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (svc *SubtitledVideoCreate) Exec(ctx context.Context) error {
	_, err := svc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svc *SubtitledVideoCreate) ExecX(ctx context.Context) {
	if err := svc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (svc *SubtitledVideoCreate) defaults() {
	if _, ok := svc.mutation.CreatedAt(); !ok {
		v := subtitledvideo.DefaultCreatedAt
		svc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (svc *SubtitledVideoCreate) check() error {
	if _, ok := svc.mutation.OriginalVideoID(); !ok {
		return &ValidationError{Name: "original_video_id", err: errors.New(`videodbgen: missing required field "SubtitledVideo.original_video_id"`)}
	}
	if _, ok := svc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`videodbgen: missing required field "SubtitledVideo.url"`)}
	}
	if _, ok := svc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`videodbgen: missing required field "SubtitledVideo.created_at"`)}
	}
	if _, ok := svc.mutation.OriginalVideoID(); !ok {
		return &ValidationError{Name: "original_video", err: errors.New(`videodbgen: missing required edge "SubtitledVideo.original_video"`)}
	}
	return nil
}

func (svc *SubtitledVideoCreate) sqlSave(ctx context.Context) (*SubtitledVideo, error) {
	if err := svc.check(); err != nil {
		return nil, err
	}
	_node, _spec := svc.createSpec()
	if err := sqlgraph.CreateNode(ctx, svc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	svc.mutation.id = &_node.ID
	svc.mutation.done = true
	return _node, nil
}

func (svc *SubtitledVideoCreate) createSpec() (*SubtitledVideo, *sqlgraph.CreateSpec) {
	var (
		_node = &SubtitledVideo{config: svc.config}
		_spec = sqlgraph.NewCreateSpec(subtitledvideo.Table, sqlgraph.NewFieldSpec(subtitledvideo.FieldID, field.TypeInt))
	)
	if value, ok := svc.mutation.URL(); ok {
		_spec.SetField(subtitledvideo.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := svc.mutation.CreatedAt(); ok {
		_spec.SetField(subtitledvideo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := svc.mutation.OriginalVideoIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subtitledvideo.OriginalVideoTable,
			Columns: []string{subtitledvideo.OriginalVideoColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(originalvideo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OriginalVideoID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SubtitledVideoCreateBulk is the builder for creating many SubtitledVideo entities in bulk.
type SubtitledVideoCreateBulk struct {
	config
	builders []*SubtitledVideoCreate
}

// Save creates the SubtitledVideo entities in the database.
func (svcb *SubtitledVideoCreateBulk) Save(ctx context.Context) ([]*SubtitledVideo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(svcb.builders))
	nodes := make([]*SubtitledVideo, len(svcb.builders))
	mutators := make([]Mutator, len(svcb.builders))
	for i := range svcb.builders {
		func(i int, root context.Context) {
			builder := svcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubtitledVideoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, svcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, svcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, svcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (svcb *SubtitledVideoCreateBulk) SaveX(ctx context.Context) []*SubtitledVideo {
	v, err := svcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (svcb *SubtitledVideoCreateBulk) Exec(ctx context.Context) error {
	_, err := svcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (svcb *SubtitledVideoCreateBulk) ExecX(ctx context.Context) {
	if err := svcb.Exec(ctx); err != nil {
		panic(err)
	}
}
