// Code generated by ent, DO NOT EDIT.

package videodbgen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kimsehyoung/dongle/app/video/ent/videodbgen/originalvideo"
	"github.com/kimsehyoung/dongle/app/video/ent/videodbgen/subtitledvideo"
)

// OriginalVideoCreate is the builder for creating a OriginalVideo entity.
type OriginalVideoCreate struct {
	config
	mutation *OriginalVideoMutation
	hooks    []Hook
}

// SetAccountID sets the "account_id" field.
func (ovc *OriginalVideoCreate) SetAccountID(i int) *OriginalVideoCreate {
	ovc.mutation.SetAccountID(i)
	return ovc
}

// SetTitle sets the "title" field.
func (ovc *OriginalVideoCreate) SetTitle(s string) *OriginalVideoCreate {
	ovc.mutation.SetTitle(s)
	return ovc
}

// SetURL sets the "url" field.
func (ovc *OriginalVideoCreate) SetURL(s string) *OriginalVideoCreate {
	ovc.mutation.SetURL(s)
	return ovc
}

// SetCreatedAt sets the "created_at" field.
func (ovc *OriginalVideoCreate) SetCreatedAt(t time.Time) *OriginalVideoCreate {
	ovc.mutation.SetCreatedAt(t)
	return ovc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ovc *OriginalVideoCreate) SetNillableCreatedAt(t *time.Time) *OriginalVideoCreate {
	if t != nil {
		ovc.SetCreatedAt(*t)
	}
	return ovc
}

// AddSubtitledVideoIDs adds the "subtitled_videos" edge to the SubtitledVideo entity by IDs.
func (ovc *OriginalVideoCreate) AddSubtitledVideoIDs(ids ...int) *OriginalVideoCreate {
	ovc.mutation.AddSubtitledVideoIDs(ids...)
	return ovc
}

// AddSubtitledVideos adds the "subtitled_videos" edges to the SubtitledVideo entity.
func (ovc *OriginalVideoCreate) AddSubtitledVideos(s ...*SubtitledVideo) *OriginalVideoCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ovc.AddSubtitledVideoIDs(ids...)
}

// Mutation returns the OriginalVideoMutation object of the builder.
func (ovc *OriginalVideoCreate) Mutation() *OriginalVideoMutation {
	return ovc.mutation
}

// Save creates the OriginalVideo in the database.
func (ovc *OriginalVideoCreate) Save(ctx context.Context) (*OriginalVideo, error) {
	ovc.defaults()
	return withHooks(ctx, ovc.sqlSave, ovc.mutation, ovc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ovc *OriginalVideoCreate) SaveX(ctx context.Context) *OriginalVideo {
	v, err := ovc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ovc *OriginalVideoCreate) Exec(ctx context.Context) error {
	_, err := ovc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ovc *OriginalVideoCreate) ExecX(ctx context.Context) {
	if err := ovc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ovc *OriginalVideoCreate) defaults() {
	if _, ok := ovc.mutation.CreatedAt(); !ok {
		v := originalvideo.DefaultCreatedAt
		ovc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ovc *OriginalVideoCreate) check() error {
	if _, ok := ovc.mutation.AccountID(); !ok {
		return &ValidationError{Name: "account_id", err: errors.New(`videodbgen: missing required field "OriginalVideo.account_id"`)}
	}
	if _, ok := ovc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`videodbgen: missing required field "OriginalVideo.title"`)}
	}
	if _, ok := ovc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`videodbgen: missing required field "OriginalVideo.url"`)}
	}
	if _, ok := ovc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`videodbgen: missing required field "OriginalVideo.created_at"`)}
	}
	return nil
}

func (ovc *OriginalVideoCreate) sqlSave(ctx context.Context) (*OriginalVideo, error) {
	if err := ovc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ovc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ovc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ovc.mutation.id = &_node.ID
	ovc.mutation.done = true
	return _node, nil
}

func (ovc *OriginalVideoCreate) createSpec() (*OriginalVideo, *sqlgraph.CreateSpec) {
	var (
		_node = &OriginalVideo{config: ovc.config}
		_spec = sqlgraph.NewCreateSpec(originalvideo.Table, sqlgraph.NewFieldSpec(originalvideo.FieldID, field.TypeInt))
	)
	if value, ok := ovc.mutation.AccountID(); ok {
		_spec.SetField(originalvideo.FieldAccountID, field.TypeInt, value)
		_node.AccountID = value
	}
	if value, ok := ovc.mutation.Title(); ok {
		_spec.SetField(originalvideo.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := ovc.mutation.URL(); ok {
		_spec.SetField(originalvideo.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := ovc.mutation.CreatedAt(); ok {
		_spec.SetField(originalvideo.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := ovc.mutation.SubtitledVideosIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   originalvideo.SubtitledVideosTable,
			Columns: []string{originalvideo.SubtitledVideosColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtitledvideo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OriginalVideoCreateBulk is the builder for creating many OriginalVideo entities in bulk.
type OriginalVideoCreateBulk struct {
	config
	builders []*OriginalVideoCreate
}

// Save creates the OriginalVideo entities in the database.
func (ovcb *OriginalVideoCreateBulk) Save(ctx context.Context) ([]*OriginalVideo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ovcb.builders))
	nodes := make([]*OriginalVideo, len(ovcb.builders))
	mutators := make([]Mutator, len(ovcb.builders))
	for i := range ovcb.builders {
		func(i int, root context.Context) {
			builder := ovcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OriginalVideoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ovcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ovcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ovcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ovcb *OriginalVideoCreateBulk) SaveX(ctx context.Context) []*OriginalVideo {
	v, err := ovcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ovcb *OriginalVideoCreateBulk) Exec(ctx context.Context) error {
	_, err := ovcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ovcb *OriginalVideoCreateBulk) ExecX(ctx context.Context) {
	if err := ovcb.Exec(ctx); err != nil {
		panic(err)
	}
}
