// Code generated by ent, DO NOT EDIT.

package videodbgen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/kimsehyoung/dongle/app/video/ent/videodbgen/originalvideo"
)

// OriginalVideo is the model entity for the OriginalVideo schema.
type OriginalVideo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AccountID holds the value of the "account_id" field.
	AccountID int `json:"account_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OriginalVideoQuery when eager-loading is set.
	Edges        OriginalVideoEdges `json:"edges"`
	selectValues sql.SelectValues
}

// OriginalVideoEdges holds the relations/edges for other nodes in the graph.
type OriginalVideoEdges struct {
	// SubtitledVideos holds the value of the subtitled_videos edge.
	SubtitledVideos []*SubtitledVideo `json:"subtitled_videos,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SubtitledVideosOrErr returns the SubtitledVideos value or an error if the edge
// was not loaded in eager-loading.
func (e OriginalVideoEdges) SubtitledVideosOrErr() ([]*SubtitledVideo, error) {
	if e.loadedTypes[0] {
		return e.SubtitledVideos, nil
	}
	return nil, &NotLoadedError{edge: "subtitled_videos"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OriginalVideo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case originalvideo.FieldID, originalvideo.FieldAccountID:
			values[i] = new(sql.NullInt64)
		case originalvideo.FieldTitle, originalvideo.FieldURL:
			values[i] = new(sql.NullString)
		case originalvideo.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OriginalVideo fields.
func (ov *OriginalVideo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case originalvideo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ov.ID = int(value.Int64)
		case originalvideo.FieldAccountID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field account_id", values[i])
			} else if value.Valid {
				ov.AccountID = int(value.Int64)
			}
		case originalvideo.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ov.Title = value.String
			}
		case originalvideo.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				ov.URL = value.String
			}
		case originalvideo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ov.CreatedAt = value.Time
			}
		default:
			ov.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OriginalVideo.
// This includes values selected through modifiers, order, etc.
func (ov *OriginalVideo) Value(name string) (ent.Value, error) {
	return ov.selectValues.Get(name)
}

// QuerySubtitledVideos queries the "subtitled_videos" edge of the OriginalVideo entity.
func (ov *OriginalVideo) QuerySubtitledVideos() *SubtitledVideoQuery {
	return NewOriginalVideoClient(ov.config).QuerySubtitledVideos(ov)
}

// Update returns a builder for updating this OriginalVideo.
// Note that you need to call OriginalVideo.Unwrap() before calling this method if this OriginalVideo
// was returned from a transaction, and the transaction was committed or rolled back.
func (ov *OriginalVideo) Update() *OriginalVideoUpdateOne {
	return NewOriginalVideoClient(ov.config).UpdateOne(ov)
}

// Unwrap unwraps the OriginalVideo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ov *OriginalVideo) Unwrap() *OriginalVideo {
	_tx, ok := ov.config.driver.(*txDriver)
	if !ok {
		panic("videodbgen: OriginalVideo is not a transactional entity")
	}
	ov.config.driver = _tx.drv
	return ov
}

// String implements the fmt.Stringer.
func (ov *OriginalVideo) String() string {
	var builder strings.Builder
	builder.WriteString("OriginalVideo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ov.ID))
	builder.WriteString("account_id=")
	builder.WriteString(fmt.Sprintf("%v", ov.AccountID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(ov.Title)
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(ov.URL)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ov.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OriginalVideos is a parsable slice of OriginalVideo.
type OriginalVideos []*OriginalVideo
