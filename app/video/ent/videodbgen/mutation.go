// Code generated by ent, DO NOT EDIT.

package videodbgen

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/kimsehyoung/dongle/app/video/ent/videodbgen/originalvideo"
	"github.com/kimsehyoung/dongle/app/video/ent/videodbgen/predicate"
	"github.com/kimsehyoung/dongle/app/video/ent/videodbgen/subtitledvideo"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeOriginalVideo  = "OriginalVideo"
	TypeSubtitledVideo = "SubtitledVideo"
)

// OriginalVideoMutation represents an operation that mutates the OriginalVideo nodes in the graph.
type OriginalVideoMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	account_id              *int
	addaccount_id           *int
	title                   *string
	url                     *string
	created_at              *time.Time
	clearedFields           map[string]struct{}
	subtitled_videos        map[int]struct{}
	removedsubtitled_videos map[int]struct{}
	clearedsubtitled_videos bool
	done                    bool
	oldValue                func(context.Context) (*OriginalVideo, error)
	predicates              []predicate.OriginalVideo
}

var _ ent.Mutation = (*OriginalVideoMutation)(nil)

// originalvideoOption allows management of the mutation configuration using functional options.
type originalvideoOption func(*OriginalVideoMutation)

// newOriginalVideoMutation creates new mutation for the OriginalVideo entity.
func newOriginalVideoMutation(c config, op Op, opts ...originalvideoOption) *OriginalVideoMutation {
	m := &OriginalVideoMutation{
		config:        c,
		op:            op,
		typ:           TypeOriginalVideo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOriginalVideoID sets the ID field of the mutation.
func withOriginalVideoID(id int) originalvideoOption {
	return func(m *OriginalVideoMutation) {
		var (
			err   error
			once  sync.Once
			value *OriginalVideo
		)
		m.oldValue = func(ctx context.Context) (*OriginalVideo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OriginalVideo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOriginalVideo sets the old OriginalVideo of the mutation.
func withOriginalVideo(node *OriginalVideo) originalvideoOption {
	return func(m *OriginalVideoMutation) {
		m.oldValue = func(context.Context) (*OriginalVideo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OriginalVideoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OriginalVideoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("videodbgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OriginalVideoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OriginalVideoMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OriginalVideo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAccountID sets the "account_id" field.
func (m *OriginalVideoMutation) SetAccountID(i int) {
	m.account_id = &i
	m.addaccount_id = nil
}

// AccountID returns the value of the "account_id" field in the mutation.
func (m *OriginalVideoMutation) AccountID() (r int, exists bool) {
	v := m.account_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAccountID returns the old "account_id" field's value of the OriginalVideo entity.
// If the OriginalVideo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OriginalVideoMutation) OldAccountID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccountID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccountID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccountID: %w", err)
	}
	return oldValue.AccountID, nil
}

// AddAccountID adds i to the "account_id" field.
func (m *OriginalVideoMutation) AddAccountID(i int) {
	if m.addaccount_id != nil {
		*m.addaccount_id += i
	} else {
		m.addaccount_id = &i
	}
}

// AddedAccountID returns the value that was added to the "account_id" field in this mutation.
func (m *OriginalVideoMutation) AddedAccountID() (r int, exists bool) {
	v := m.addaccount_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetAccountID resets all changes to the "account_id" field.
func (m *OriginalVideoMutation) ResetAccountID() {
	m.account_id = nil
	m.addaccount_id = nil
}

// SetTitle sets the "title" field.
func (m *OriginalVideoMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *OriginalVideoMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the OriginalVideo entity.
// If the OriginalVideo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OriginalVideoMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *OriginalVideoMutation) ResetTitle() {
	m.title = nil
}

// SetURL sets the "url" field.
func (m *OriginalVideoMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *OriginalVideoMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the OriginalVideo entity.
// If the OriginalVideo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OriginalVideoMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *OriginalVideoMutation) ResetURL() {
	m.url = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *OriginalVideoMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OriginalVideoMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OriginalVideo entity.
// If the OriginalVideo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OriginalVideoMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OriginalVideoMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddSubtitledVideoIDs adds the "subtitled_videos" edge to the SubtitledVideo entity by ids.
func (m *OriginalVideoMutation) AddSubtitledVideoIDs(ids ...int) {
	if m.subtitled_videos == nil {
		m.subtitled_videos = make(map[int]struct{})
	}
	for i := range ids {
		m.subtitled_videos[ids[i]] = struct{}{}
	}
}

// ClearSubtitledVideos clears the "subtitled_videos" edge to the SubtitledVideo entity.
func (m *OriginalVideoMutation) ClearSubtitledVideos() {
	m.clearedsubtitled_videos = true
}

// SubtitledVideosCleared reports if the "subtitled_videos" edge to the SubtitledVideo entity was cleared.
func (m *OriginalVideoMutation) SubtitledVideosCleared() bool {
	return m.clearedsubtitled_videos
}

// RemoveSubtitledVideoIDs removes the "subtitled_videos" edge to the SubtitledVideo entity by IDs.
func (m *OriginalVideoMutation) RemoveSubtitledVideoIDs(ids ...int) {
	if m.removedsubtitled_videos == nil {
		m.removedsubtitled_videos = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.subtitled_videos, ids[i])
		m.removedsubtitled_videos[ids[i]] = struct{}{}
	}
}

// RemovedSubtitledVideos returns the removed IDs of the "subtitled_videos" edge to the SubtitledVideo entity.
func (m *OriginalVideoMutation) RemovedSubtitledVideosIDs() (ids []int) {
	for id := range m.removedsubtitled_videos {
		ids = append(ids, id)
	}
	return
}

// SubtitledVideosIDs returns the "subtitled_videos" edge IDs in the mutation.
func (m *OriginalVideoMutation) SubtitledVideosIDs() (ids []int) {
	for id := range m.subtitled_videos {
		ids = append(ids, id)
	}
	return
}

// ResetSubtitledVideos resets all changes to the "subtitled_videos" edge.
func (m *OriginalVideoMutation) ResetSubtitledVideos() {
	m.subtitled_videos = nil
	m.clearedsubtitled_videos = false
	m.removedsubtitled_videos = nil
}

// Where appends a list predicates to the OriginalVideoMutation builder.
func (m *OriginalVideoMutation) Where(ps ...predicate.OriginalVideo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OriginalVideoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OriginalVideoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.OriginalVideo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OriginalVideoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OriginalVideoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (OriginalVideo).
func (m *OriginalVideoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OriginalVideoMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.account_id != nil {
		fields = append(fields, originalvideo.FieldAccountID)
	}
	if m.title != nil {
		fields = append(fields, originalvideo.FieldTitle)
	}
	if m.url != nil {
		fields = append(fields, originalvideo.FieldURL)
	}
	if m.created_at != nil {
		fields = append(fields, originalvideo.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OriginalVideoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case originalvideo.FieldAccountID:
		return m.AccountID()
	case originalvideo.FieldTitle:
		return m.Title()
	case originalvideo.FieldURL:
		return m.URL()
	case originalvideo.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OriginalVideoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case originalvideo.FieldAccountID:
		return m.OldAccountID(ctx)
	case originalvideo.FieldTitle:
		return m.OldTitle(ctx)
	case originalvideo.FieldURL:
		return m.OldURL(ctx)
	case originalvideo.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown OriginalVideo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OriginalVideoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case originalvideo.FieldAccountID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccountID(v)
		return nil
	case originalvideo.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case originalvideo.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case originalvideo.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown OriginalVideo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OriginalVideoMutation) AddedFields() []string {
	var fields []string
	if m.addaccount_id != nil {
		fields = append(fields, originalvideo.FieldAccountID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OriginalVideoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case originalvideo.FieldAccountID:
		return m.AddedAccountID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OriginalVideoMutation) AddField(name string, value ent.Value) error {
	switch name {
	case originalvideo.FieldAccountID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAccountID(v)
		return nil
	}
	return fmt.Errorf("unknown OriginalVideo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OriginalVideoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OriginalVideoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OriginalVideoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown OriginalVideo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OriginalVideoMutation) ResetField(name string) error {
	switch name {
	case originalvideo.FieldAccountID:
		m.ResetAccountID()
		return nil
	case originalvideo.FieldTitle:
		m.ResetTitle()
		return nil
	case originalvideo.FieldURL:
		m.ResetURL()
		return nil
	case originalvideo.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown OriginalVideo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OriginalVideoMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.subtitled_videos != nil {
		edges = append(edges, originalvideo.EdgeSubtitledVideos)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OriginalVideoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case originalvideo.EdgeSubtitledVideos:
		ids := make([]ent.Value, 0, len(m.subtitled_videos))
		for id := range m.subtitled_videos {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OriginalVideoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedsubtitled_videos != nil {
		edges = append(edges, originalvideo.EdgeSubtitledVideos)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OriginalVideoMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case originalvideo.EdgeSubtitledVideos:
		ids := make([]ent.Value, 0, len(m.removedsubtitled_videos))
		for id := range m.removedsubtitled_videos {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OriginalVideoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedsubtitled_videos {
		edges = append(edges, originalvideo.EdgeSubtitledVideos)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OriginalVideoMutation) EdgeCleared(name string) bool {
	switch name {
	case originalvideo.EdgeSubtitledVideos:
		return m.clearedsubtitled_videos
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OriginalVideoMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown OriginalVideo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OriginalVideoMutation) ResetEdge(name string) error {
	switch name {
	case originalvideo.EdgeSubtitledVideos:
		m.ResetSubtitledVideos()
		return nil
	}
	return fmt.Errorf("unknown OriginalVideo edge %s", name)
}

// SubtitledVideoMutation represents an operation that mutates the SubtitledVideo nodes in the graph.
type SubtitledVideoMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	url                   *string
	created_at            *time.Time
	clearedFields         map[string]struct{}
	original_video        *int
	clearedoriginal_video bool
	done                  bool
	oldValue              func(context.Context) (*SubtitledVideo, error)
	predicates            []predicate.SubtitledVideo
}

var _ ent.Mutation = (*SubtitledVideoMutation)(nil)

// subtitledvideoOption allows management of the mutation configuration using functional options.
type subtitledvideoOption func(*SubtitledVideoMutation)

// newSubtitledVideoMutation creates new mutation for the SubtitledVideo entity.
func newSubtitledVideoMutation(c config, op Op, opts ...subtitledvideoOption) *SubtitledVideoMutation {
	m := &SubtitledVideoMutation{
		config:        c,
		op:            op,
		typ:           TypeSubtitledVideo,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSubtitledVideoID sets the ID field of the mutation.
func withSubtitledVideoID(id int) subtitledvideoOption {
	return func(m *SubtitledVideoMutation) {
		var (
			err   error
			once  sync.Once
			value *SubtitledVideo
		)
		m.oldValue = func(ctx context.Context) (*SubtitledVideo, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().SubtitledVideo.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSubtitledVideo sets the old SubtitledVideo of the mutation.
func withSubtitledVideo(node *SubtitledVideo) subtitledvideoOption {
	return func(m *SubtitledVideoMutation) {
		m.oldValue = func(context.Context) (*SubtitledVideo, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SubtitledVideoMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SubtitledVideoMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("videodbgen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SubtitledVideoMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SubtitledVideoMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().SubtitledVideo.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetOriginalVideoID sets the "original_video_id" field.
func (m *SubtitledVideoMutation) SetOriginalVideoID(i int) {
	m.original_video = &i
}

// OriginalVideoID returns the value of the "original_video_id" field in the mutation.
func (m *SubtitledVideoMutation) OriginalVideoID() (r int, exists bool) {
	v := m.original_video
	if v == nil {
		return
	}
	return *v, true
}

// OldOriginalVideoID returns the old "original_video_id" field's value of the SubtitledVideo entity.
// If the SubtitledVideo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubtitledVideoMutation) OldOriginalVideoID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOriginalVideoID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOriginalVideoID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOriginalVideoID: %w", err)
	}
	return oldValue.OriginalVideoID, nil
}

// ResetOriginalVideoID resets all changes to the "original_video_id" field.
func (m *SubtitledVideoMutation) ResetOriginalVideoID() {
	m.original_video = nil
}

// SetURL sets the "url" field.
func (m *SubtitledVideoMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *SubtitledVideoMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the SubtitledVideo entity.
// If the SubtitledVideo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubtitledVideoMutation) OldURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ResetURL resets all changes to the "url" field.
func (m *SubtitledVideoMutation) ResetURL() {
	m.url = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *SubtitledVideoMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *SubtitledVideoMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the SubtitledVideo entity.
// If the SubtitledVideo object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SubtitledVideoMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *SubtitledVideoMutation) ResetCreatedAt() {
	m.created_at = nil
}

// ClearOriginalVideo clears the "original_video" edge to the OriginalVideo entity.
func (m *SubtitledVideoMutation) ClearOriginalVideo() {
	m.clearedoriginal_video = true
}

// OriginalVideoCleared reports if the "original_video" edge to the OriginalVideo entity was cleared.
func (m *SubtitledVideoMutation) OriginalVideoCleared() bool {
	return m.clearedoriginal_video
}

// OriginalVideoIDs returns the "original_video" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OriginalVideoID instead. It exists only for internal usage by the builders.
func (m *SubtitledVideoMutation) OriginalVideoIDs() (ids []int) {
	if id := m.original_video; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOriginalVideo resets all changes to the "original_video" edge.
func (m *SubtitledVideoMutation) ResetOriginalVideo() {
	m.original_video = nil
	m.clearedoriginal_video = false
}

// Where appends a list predicates to the SubtitledVideoMutation builder.
func (m *SubtitledVideoMutation) Where(ps ...predicate.SubtitledVideo) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the SubtitledVideoMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *SubtitledVideoMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.SubtitledVideo, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *SubtitledVideoMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *SubtitledVideoMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (SubtitledVideo).
func (m *SubtitledVideoMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SubtitledVideoMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.original_video != nil {
		fields = append(fields, subtitledvideo.FieldOriginalVideoID)
	}
	if m.url != nil {
		fields = append(fields, subtitledvideo.FieldURL)
	}
	if m.created_at != nil {
		fields = append(fields, subtitledvideo.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SubtitledVideoMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case subtitledvideo.FieldOriginalVideoID:
		return m.OriginalVideoID()
	case subtitledvideo.FieldURL:
		return m.URL()
	case subtitledvideo.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SubtitledVideoMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case subtitledvideo.FieldOriginalVideoID:
		return m.OldOriginalVideoID(ctx)
	case subtitledvideo.FieldURL:
		return m.OldURL(ctx)
	case subtitledvideo.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown SubtitledVideo field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubtitledVideoMutation) SetField(name string, value ent.Value) error {
	switch name {
	case subtitledvideo.FieldOriginalVideoID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOriginalVideoID(v)
		return nil
	case subtitledvideo.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case subtitledvideo.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown SubtitledVideo field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SubtitledVideoMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SubtitledVideoMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SubtitledVideoMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown SubtitledVideo numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SubtitledVideoMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SubtitledVideoMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SubtitledVideoMutation) ClearField(name string) error {
	return fmt.Errorf("unknown SubtitledVideo nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SubtitledVideoMutation) ResetField(name string) error {
	switch name {
	case subtitledvideo.FieldOriginalVideoID:
		m.ResetOriginalVideoID()
		return nil
	case subtitledvideo.FieldURL:
		m.ResetURL()
		return nil
	case subtitledvideo.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown SubtitledVideo field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SubtitledVideoMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.original_video != nil {
		edges = append(edges, subtitledvideo.EdgeOriginalVideo)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SubtitledVideoMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case subtitledvideo.EdgeOriginalVideo:
		if id := m.original_video; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SubtitledVideoMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SubtitledVideoMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SubtitledVideoMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedoriginal_video {
		edges = append(edges, subtitledvideo.EdgeOriginalVideo)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SubtitledVideoMutation) EdgeCleared(name string) bool {
	switch name {
	case subtitledvideo.EdgeOriginalVideo:
		return m.clearedoriginal_video
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SubtitledVideoMutation) ClearEdge(name string) error {
	switch name {
	case subtitledvideo.EdgeOriginalVideo:
		m.ClearOriginalVideo()
		return nil
	}
	return fmt.Errorf("unknown SubtitledVideo unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SubtitledVideoMutation) ResetEdge(name string) error {
	switch name {
	case subtitledvideo.EdgeOriginalVideo:
		m.ResetOriginalVideo()
		return nil
	}
	return fmt.Errorf("unknown SubtitledVideo edge %s", name)
}
