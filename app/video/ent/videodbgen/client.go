// Code generated by ent, DO NOT EDIT.

package videodbgen

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/kimsehyoung/dongle/app/video/ent/videodbgen/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/kimsehyoung/dongle/app/video/ent/videodbgen/originalvideo"
	"github.com/kimsehyoung/dongle/app/video/ent/videodbgen/subtitledvideo"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// OriginalVideo is the client for interacting with the OriginalVideo builders.
	OriginalVideo *OriginalVideoClient
	// SubtitledVideo is the client for interacting with the SubtitledVideo builders.
	SubtitledVideo *SubtitledVideoClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.OriginalVideo = NewOriginalVideoClient(c.config)
	c.SubtitledVideo = NewSubtitledVideoClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("videodbgen: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("videodbgen: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		OriginalVideo:  NewOriginalVideoClient(cfg),
		SubtitledVideo: NewSubtitledVideoClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		OriginalVideo:  NewOriginalVideoClient(cfg),
		SubtitledVideo: NewSubtitledVideoClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		OriginalVideo.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.OriginalVideo.Use(hooks...)
	c.SubtitledVideo.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.OriginalVideo.Intercept(interceptors...)
	c.SubtitledVideo.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *OriginalVideoMutation:
		return c.OriginalVideo.mutate(ctx, m)
	case *SubtitledVideoMutation:
		return c.SubtitledVideo.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("videodbgen: unknown mutation type %T", m)
	}
}

// OriginalVideoClient is a client for the OriginalVideo schema.
type OriginalVideoClient struct {
	config
}

// NewOriginalVideoClient returns a client for the OriginalVideo from the given config.
func NewOriginalVideoClient(c config) *OriginalVideoClient {
	return &OriginalVideoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `originalvideo.Hooks(f(g(h())))`.
func (c *OriginalVideoClient) Use(hooks ...Hook) {
	c.hooks.OriginalVideo = append(c.hooks.OriginalVideo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `originalvideo.Intercept(f(g(h())))`.
func (c *OriginalVideoClient) Intercept(interceptors ...Interceptor) {
	c.inters.OriginalVideo = append(c.inters.OriginalVideo, interceptors...)
}

// Create returns a builder for creating a OriginalVideo entity.
func (c *OriginalVideoClient) Create() *OriginalVideoCreate {
	mutation := newOriginalVideoMutation(c.config, OpCreate)
	return &OriginalVideoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OriginalVideo entities.
func (c *OriginalVideoClient) CreateBulk(builders ...*OriginalVideoCreate) *OriginalVideoCreateBulk {
	return &OriginalVideoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OriginalVideo.
func (c *OriginalVideoClient) Update() *OriginalVideoUpdate {
	mutation := newOriginalVideoMutation(c.config, OpUpdate)
	return &OriginalVideoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OriginalVideoClient) UpdateOne(ov *OriginalVideo) *OriginalVideoUpdateOne {
	mutation := newOriginalVideoMutation(c.config, OpUpdateOne, withOriginalVideo(ov))
	return &OriginalVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OriginalVideoClient) UpdateOneID(id int) *OriginalVideoUpdateOne {
	mutation := newOriginalVideoMutation(c.config, OpUpdateOne, withOriginalVideoID(id))
	return &OriginalVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OriginalVideo.
func (c *OriginalVideoClient) Delete() *OriginalVideoDelete {
	mutation := newOriginalVideoMutation(c.config, OpDelete)
	return &OriginalVideoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OriginalVideoClient) DeleteOne(ov *OriginalVideo) *OriginalVideoDeleteOne {
	return c.DeleteOneID(ov.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OriginalVideoClient) DeleteOneID(id int) *OriginalVideoDeleteOne {
	builder := c.Delete().Where(originalvideo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OriginalVideoDeleteOne{builder}
}

// Query returns a query builder for OriginalVideo.
func (c *OriginalVideoClient) Query() *OriginalVideoQuery {
	return &OriginalVideoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOriginalVideo},
		inters: c.Interceptors(),
	}
}

// Get returns a OriginalVideo entity by its id.
func (c *OriginalVideoClient) Get(ctx context.Context, id int) (*OriginalVideo, error) {
	return c.Query().Where(originalvideo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OriginalVideoClient) GetX(ctx context.Context, id int) *OriginalVideo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySubtitledVideos queries the subtitled_videos edge of a OriginalVideo.
func (c *OriginalVideoClient) QuerySubtitledVideos(ov *OriginalVideo) *SubtitledVideoQuery {
	query := (&SubtitledVideoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ov.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(originalvideo.Table, originalvideo.FieldID, id),
			sqlgraph.To(subtitledvideo.Table, subtitledvideo.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, originalvideo.SubtitledVideosTable, originalvideo.SubtitledVideosColumn),
		)
		fromV = sqlgraph.Neighbors(ov.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OriginalVideoClient) Hooks() []Hook {
	return c.hooks.OriginalVideo
}

// Interceptors returns the client interceptors.
func (c *OriginalVideoClient) Interceptors() []Interceptor {
	return c.inters.OriginalVideo
}

func (c *OriginalVideoClient) mutate(ctx context.Context, m *OriginalVideoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OriginalVideoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OriginalVideoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OriginalVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OriginalVideoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("videodbgen: unknown OriginalVideo mutation op: %q", m.Op())
	}
}

// SubtitledVideoClient is a client for the SubtitledVideo schema.
type SubtitledVideoClient struct {
	config
}

// NewSubtitledVideoClient returns a client for the SubtitledVideo from the given config.
func NewSubtitledVideoClient(c config) *SubtitledVideoClient {
	return &SubtitledVideoClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subtitledvideo.Hooks(f(g(h())))`.
func (c *SubtitledVideoClient) Use(hooks ...Hook) {
	c.hooks.SubtitledVideo = append(c.hooks.SubtitledVideo, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `subtitledvideo.Intercept(f(g(h())))`.
func (c *SubtitledVideoClient) Intercept(interceptors ...Interceptor) {
	c.inters.SubtitledVideo = append(c.inters.SubtitledVideo, interceptors...)
}

// Create returns a builder for creating a SubtitledVideo entity.
func (c *SubtitledVideoClient) Create() *SubtitledVideoCreate {
	mutation := newSubtitledVideoMutation(c.config, OpCreate)
	return &SubtitledVideoCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SubtitledVideo entities.
func (c *SubtitledVideoClient) CreateBulk(builders ...*SubtitledVideoCreate) *SubtitledVideoCreateBulk {
	return &SubtitledVideoCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SubtitledVideo.
func (c *SubtitledVideoClient) Update() *SubtitledVideoUpdate {
	mutation := newSubtitledVideoMutation(c.config, OpUpdate)
	return &SubtitledVideoUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubtitledVideoClient) UpdateOne(sv *SubtitledVideo) *SubtitledVideoUpdateOne {
	mutation := newSubtitledVideoMutation(c.config, OpUpdateOne, withSubtitledVideo(sv))
	return &SubtitledVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubtitledVideoClient) UpdateOneID(id int) *SubtitledVideoUpdateOne {
	mutation := newSubtitledVideoMutation(c.config, OpUpdateOne, withSubtitledVideoID(id))
	return &SubtitledVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SubtitledVideo.
func (c *SubtitledVideoClient) Delete() *SubtitledVideoDelete {
	mutation := newSubtitledVideoMutation(c.config, OpDelete)
	return &SubtitledVideoDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubtitledVideoClient) DeleteOne(sv *SubtitledVideo) *SubtitledVideoDeleteOne {
	return c.DeleteOneID(sv.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubtitledVideoClient) DeleteOneID(id int) *SubtitledVideoDeleteOne {
	builder := c.Delete().Where(subtitledvideo.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubtitledVideoDeleteOne{builder}
}

// Query returns a query builder for SubtitledVideo.
func (c *SubtitledVideoClient) Query() *SubtitledVideoQuery {
	return &SubtitledVideoQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSubtitledVideo},
		inters: c.Interceptors(),
	}
}

// Get returns a SubtitledVideo entity by its id.
func (c *SubtitledVideoClient) Get(ctx context.Context, id int) (*SubtitledVideo, error) {
	return c.Query().Where(subtitledvideo.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubtitledVideoClient) GetX(ctx context.Context, id int) *SubtitledVideo {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOriginalVideo queries the original_video edge of a SubtitledVideo.
func (c *SubtitledVideoClient) QueryOriginalVideo(sv *SubtitledVideo) *OriginalVideoQuery {
	query := (&OriginalVideoClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sv.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subtitledvideo.Table, subtitledvideo.FieldID, id),
			sqlgraph.To(originalvideo.Table, originalvideo.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, subtitledvideo.OriginalVideoTable, subtitledvideo.OriginalVideoColumn),
		)
		fromV = sqlgraph.Neighbors(sv.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubtitledVideoClient) Hooks() []Hook {
	return c.hooks.SubtitledVideo
}

// Interceptors returns the client interceptors.
func (c *SubtitledVideoClient) Interceptors() []Interceptor {
	return c.inters.SubtitledVideo
}

func (c *SubtitledVideoClient) mutate(ctx context.Context, m *SubtitledVideoMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SubtitledVideoCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SubtitledVideoUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SubtitledVideoUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SubtitledVideoDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("videodbgen: unknown SubtitledVideo mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		OriginalVideo, SubtitledVideo []ent.Hook
	}
	inters struct {
		OriginalVideo, SubtitledVideo []ent.Interceptor
	}
)
