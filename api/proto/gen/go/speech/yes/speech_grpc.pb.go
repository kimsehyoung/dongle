// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: speech.proto

package speech

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Speech_Recognize_FullMethodName  = "/dongle.speech.Speech/Recognize"
	Speech_Synthesize_FullMethodName = "/dongle.speech.Speech/Synthesize"
)

// SpeechClient is the client API for Speech service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpeechClient interface {
	// ### STT ###
	Recognize(ctx context.Context, in *RecognizeRequest, opts ...grpc.CallOption) (*RecognizeResponse, error)
	// ### TTS ###
	Synthesize(ctx context.Context, in *SynthesizeRequest, opts ...grpc.CallOption) (*SynthesizeResponse, error)
}

type speechClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeechClient(cc grpc.ClientConnInterface) SpeechClient {
	return &speechClient{cc}
}

func (c *speechClient) Recognize(ctx context.Context, in *RecognizeRequest, opts ...grpc.CallOption) (*RecognizeResponse, error) {
	out := new(RecognizeResponse)
	err := c.cc.Invoke(ctx, Speech_Recognize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speechClient) Synthesize(ctx context.Context, in *SynthesizeRequest, opts ...grpc.CallOption) (*SynthesizeResponse, error) {
	out := new(SynthesizeResponse)
	err := c.cc.Invoke(ctx, Speech_Synthesize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpeechServer is the server API for Speech service.
// All implementations must embed UnimplementedSpeechServer
// for forward compatibility
type SpeechServer interface {
	// ### STT ###
	Recognize(context.Context, *RecognizeRequest) (*RecognizeResponse, error)
	// ### TTS ###
	Synthesize(context.Context, *SynthesizeRequest) (*SynthesizeResponse, error)
	mustEmbedUnimplementedSpeechServer()
}

// UnimplementedSpeechServer must be embedded to have forward compatible implementations.
type UnimplementedSpeechServer struct {
}

func (UnimplementedSpeechServer) Recognize(context.Context, *RecognizeRequest) (*RecognizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Recognize not implemented")
}
func (UnimplementedSpeechServer) Synthesize(context.Context, *SynthesizeRequest) (*SynthesizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Synthesize not implemented")
}
func (UnimplementedSpeechServer) mustEmbedUnimplementedSpeechServer() {}

// UnsafeSpeechServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpeechServer will
// result in compilation errors.
type UnsafeSpeechServer interface {
	mustEmbedUnimplementedSpeechServer()
}

func RegisterSpeechServer(s grpc.ServiceRegistrar, srv SpeechServer) {
	s.RegisterService(&Speech_ServiceDesc, srv)
}

func _Speech_Recognize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecognizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeechServer).Recognize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Speech_Recognize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeechServer).Recognize(ctx, req.(*RecognizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Speech_Synthesize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SynthesizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeechServer).Synthesize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Speech_Synthesize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeechServer).Synthesize(ctx, req.(*SynthesizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Speech_ServiceDesc is the grpc.ServiceDesc for Speech service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Speech_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dongle.speech.Speech",
	HandlerType: (*SpeechServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Recognize",
			Handler:    _Speech_Recognize_Handler,
		},
		{
			MethodName: "Synthesize",
			Handler:    _Speech_Synthesize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "speech.proto",
}
