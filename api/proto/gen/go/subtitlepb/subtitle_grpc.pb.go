// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.6
// source: subtitle.proto

package subtitlepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Subtitle_ListVideos_FullMethodName    = "/dongle.subtitle.Subtitle/ListVideos"
	Subtitle_UploadVideo_FullMethodName   = "/dongle.subtitle.Subtitle/UploadVideo"
	Subtitle_DeleteVideo_FullMethodName   = "/dongle.subtitle.Subtitle/DeleteVideo"
	Subtitle_SubtitleVideo_FullMethodName = "/dongle.subtitle.Subtitle/SubtitleVideo"
)

// SubtitleClient is the client API for Subtitle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubtitleClient interface {
	ListVideos(ctx context.Context, in *ListVideosRequest, opts ...grpc.CallOption) (*ListVideosResponse, error)
	UploadVideo(ctx context.Context, in *UploadVideoRequest, opts ...grpc.CallOption) (*UploadVideoResponse, error)
	DeleteVideo(ctx context.Context, in *UploadVideoRequest, opts ...grpc.CallOption) (*UploadVideoResponse, error)
	SubtitleVideo(ctx context.Context, in *SubtitleVideoRequest, opts ...grpc.CallOption) (*SubtitleVideoResponse, error)
}

type subtitleClient struct {
	cc grpc.ClientConnInterface
}

func NewSubtitleClient(cc grpc.ClientConnInterface) SubtitleClient {
	return &subtitleClient{cc}
}

func (c *subtitleClient) ListVideos(ctx context.Context, in *ListVideosRequest, opts ...grpc.CallOption) (*ListVideosResponse, error) {
	out := new(ListVideosResponse)
	err := c.cc.Invoke(ctx, Subtitle_ListVideos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtitleClient) UploadVideo(ctx context.Context, in *UploadVideoRequest, opts ...grpc.CallOption) (*UploadVideoResponse, error) {
	out := new(UploadVideoResponse)
	err := c.cc.Invoke(ctx, Subtitle_UploadVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtitleClient) DeleteVideo(ctx context.Context, in *UploadVideoRequest, opts ...grpc.CallOption) (*UploadVideoResponse, error) {
	out := new(UploadVideoResponse)
	err := c.cc.Invoke(ctx, Subtitle_DeleteVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subtitleClient) SubtitleVideo(ctx context.Context, in *SubtitleVideoRequest, opts ...grpc.CallOption) (*SubtitleVideoResponse, error) {
	out := new(SubtitleVideoResponse)
	err := c.cc.Invoke(ctx, Subtitle_SubtitleVideo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubtitleServer is the server API for Subtitle service.
// All implementations must embed UnimplementedSubtitleServer
// for forward compatibility
type SubtitleServer interface {
	ListVideos(context.Context, *ListVideosRequest) (*ListVideosResponse, error)
	UploadVideo(context.Context, *UploadVideoRequest) (*UploadVideoResponse, error)
	DeleteVideo(context.Context, *UploadVideoRequest) (*UploadVideoResponse, error)
	SubtitleVideo(context.Context, *SubtitleVideoRequest) (*SubtitleVideoResponse, error)
	mustEmbedUnimplementedSubtitleServer()
}

// UnimplementedSubtitleServer must be embedded to have forward compatible implementations.
type UnimplementedSubtitleServer struct {
}

func (UnimplementedSubtitleServer) ListVideos(context.Context, *ListVideosRequest) (*ListVideosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVideos not implemented")
}
func (UnimplementedSubtitleServer) UploadVideo(context.Context, *UploadVideoRequest) (*UploadVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadVideo not implemented")
}
func (UnimplementedSubtitleServer) DeleteVideo(context.Context, *UploadVideoRequest) (*UploadVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVideo not implemented")
}
func (UnimplementedSubtitleServer) SubtitleVideo(context.Context, *SubtitleVideoRequest) (*SubtitleVideoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubtitleVideo not implemented")
}
func (UnimplementedSubtitleServer) mustEmbedUnimplementedSubtitleServer() {}

// UnsafeSubtitleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubtitleServer will
// result in compilation errors.
type UnsafeSubtitleServer interface {
	mustEmbedUnimplementedSubtitleServer()
}

func RegisterSubtitleServer(s grpc.ServiceRegistrar, srv SubtitleServer) {
	s.RegisterService(&Subtitle_ServiceDesc, srv)
}

func _Subtitle_ListVideos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVideosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtitleServer).ListVideos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Subtitle_ListVideos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtitleServer).ListVideos(ctx, req.(*ListVideosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subtitle_UploadVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtitleServer).UploadVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Subtitle_UploadVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtitleServer).UploadVideo(ctx, req.(*UploadVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subtitle_DeleteVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtitleServer).DeleteVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Subtitle_DeleteVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtitleServer).DeleteVideo(ctx, req.(*UploadVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subtitle_SubtitleVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubtitleVideoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubtitleServer).SubtitleVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Subtitle_SubtitleVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubtitleServer).SubtitleVideo(ctx, req.(*SubtitleVideoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Subtitle_ServiceDesc is the grpc.ServiceDesc for Subtitle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Subtitle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dongle.subtitle.Subtitle",
	HandlerType: (*SubtitleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListVideos",
			Handler:    _Subtitle_ListVideos_Handler,
		},
		{
			MethodName: "UploadVideo",
			Handler:    _Subtitle_UploadVideo_Handler,
		},
		{
			MethodName: "DeleteVideo",
			Handler:    _Subtitle_DeleteVideo_Handler,
		},
		{
			MethodName: "SubtitleVideo",
			Handler:    _Subtitle_SubtitleVideo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subtitle.proto",
}
