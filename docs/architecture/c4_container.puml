@startuml app_arch_level1
!include <c4/C4_Component.puml>  
' scale 500 width
' https://github.com/plantuml-stdlib/C4-PlantUML/blob/master/README.md
title Container diagram for Dongle

Person(client, "Client" , "Users of Dongle")

System_Boundary(c1, "Dongle") {
    ' Container(containerAlias, "Label", "Technology", "Optional Description")
    Container(api_gateway, "API Gateway", "Go, gRPC-Gateway","Single API endpoint")
    Container(auth, "Auth", "Go, gRPC", "Account, Token-based, Role-based access control")
    Container(speech, "Speech", "Python, gRPC", "TTS, STT")
    Container(chatbot, "Chatbot", "Python, gRPC", "1. rule-based intent\n 2. deeplearning chat-api")
    Container(music, "Music", "Go, gRPC","Music service Management")
    ContainerDb(auth_memorydb, "In-memory database", "Redis", "refresh token")
    ContainerDb(auth_rdb, "Relational database", "PostgreSQL", "account, role")
    ContainerDb(chatbot_rdb, "Relational database", "PostgreSQL", "question history")
}



' LAYOUT_LEFT_RIGHT()
' SHOW_PERSON_PORTRAIT()


' Boundary(c0, "OpenAI") {
'     System_Ext(chat, "Chat API")
' }
Boundary(c0, "Goodle Cloud") {
    System_Ext(texttospeech, "Text-to-Speech API")
    System_Ext(speechtotext, "Speech-to-Text API")
}



System_Boundary(c1, "Dongle") {
    Container(apigateway, "API Gateway", "Go, gRPC-Gateway","Single API endpoint")
    Container(auth, "Auth", "Go, gRPC", "Account, Token-based, Role-based access control")
    Container(speech, "Speech", "Python, gRPC", "TTS, STT")
    Container(chatbot, "Chatbot", "Python, gRPC", "1. rule-based intent\n 2. deeplearning chat-api")
    Container(music, "Music", "Go, gRPC","Music service Management")
    ContainerDb(auth_memorydb, "In-memory database", "Redis", "refresh token")
    ContainerDb(auth_rdb, "Relational database", "PostgreSQL", "account, role")
    ContainerDb(chatbot_rdb, "Relational database", "PostgreSQL", "question history")
}


Rel(apigateway, auth, "", "gRPC")
Rel(apigateway, speech, "", "gRPC")
Rel(apigateway, chatbot, "", "gRPC")
Rel(apigateway, music, "", "gRPC")
Rel(auth, auth_memorydb, "", "")
Rel(auth, auth_rdb, "", "")
Rel(chatbot, chatbot_rdb, "", "")


' Rel_L(dbmanager, db, " ", "HTTP")

' Lay_Distance(app, apigateway, 1)
' Lay_Distance(admin, webserver, 1)
' Lay_L(modelserver, dbmanager)
' Lay_R(user, admin)

@enduml